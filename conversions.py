import numpy as np
from collections import defaultdict

def adj_matrix_to_adj_list(adj_m):
    adj_l = defaultdict(list)
    for index, x in np.ndenumerate(adj_m):
        if x == 1:
            adj_l[index[0]+1].append(index[1]+1)
    return adj_l

# print(adj_matrix_to_adj_list([
# [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
# [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
# [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
# [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0],
# [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0],
# [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0],
# [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1],
# [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
# [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]
# ]))


def adj_matrix_to_inc_matrix(adj_m):
    col_num = 0
    for i in adj_m:
        for j in i:
            if j == 1:
                col_num += 1
    inc_m = np.zeros((len(adj_m), int(col_num/2)), dtype=int)
    edge = 0
    for i in range(0, len(adj_m)):
        for j in range(0, i):
            if adj_m[i][j] == 1:
                inc_m[i][edge] = inc_m[j][edge] = 1
                edge += 1
    return inc_m

# print('---------------------------------------------------')
# print(adj_matrix_to_inc_matrix([
# [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
# [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
# [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
# [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0],
# [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0],
# [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0],
# [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1],
# [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
# [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0]
# ]))
# print('---------------------------------------------------')

def adj_list_to_adj_matrix(adj_l):
    n = len(adj_l)
    adj_m = np.zeros((n, n), dtype=int)

    for k, v in adj_l.items():
        for i in v:
            adj_m[k-1][i-1] = adj_m[i-1][k-1] = 1
    return adj_m

# print(adj_list_to_adj_matrix({1: [2, 5, 6], 2: [1, 3, 6], 3: [2, 4, 5, 12], 4: [3, 8, 9, 11], 5: [1, 3, 7, 9], 6: [1, 2, 7], 7: [5, 6, 8], 8: [4, 7, 9, 12], 9: [4, 5, 8, 10], 10: [9], 11: [4], 12: [3, 8]}))
#
# print('---------------------------------------------------')


def inc_matrix_to_adj_matrix(inc_matrix):
    l = len(inc_matrix)

    adj_matrix = np.zeros((l, l), dtype=int)

    for i in range(len(inc_matrix[0])):
        n = []
        for j in range(l):
            if inc_matrix[j][i]:
                n.append(j)
        adj_matrix[n[0]][n[1]] = adj_matrix[n[1]][n[0]] = 1

    return adj_matrix

# print(inc_matrix_to_adj_matrix([
# [1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],
# [0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0],
# [0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0],
# [0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1],
# [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]
# ]))

def adj_list_to_inc_matrix(adj_l):
    adj_m = adj_list_to_adj_matrix(adj_l)
    return adj_matrix_to_inc_matrix(adj_m)

# print('---------------------------------------------------')
#
# print(adj_list_to_inc_matrix({1: [2, 5, 6], 2: [1, 3, 6], 3: [2, 4, 5, 12], 4: [3, 8, 9, 11], 5: [1, 3, 7, 9], 6: [1, 2, 7], 7: [5, 6, 8], 8: [4, 7, 9, 12], 9: [4, 5, 8, 10], 10: [9], 11: [4], 12: [3, 8]}))
#
# print('---------------------------------------------------')

def inc_matrix_to_adj_list(inc_m):
    adj_m = inc_matrix_to_adj_matrix(inc_m)
    return adj_matrix_to_adj_list(adj_m)

# print(inc_matrix_to_adj_list([
# [1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
# [1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
# [0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0],
# [0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0],
# [0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0],
# [0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0],
# [0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1],
# [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
# [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]
# ]))
